---
title: "Git"
layout: post
date: 2019-02-10 07:30
image: /assets/images/Git.png
headerImage: true
tag:
- Git
star: true
category: blog
author: Anantha Raju C
description: Git
---

## Summary:

Git is a distributed version-control system for tracking changes in source code during software development.

Refer https://github.com/AnanthaRajuC/Git-Feature-Branch-Workflow for **Git Feature Branch Workflow** example with all relevant git commands.

Refer https://github.com/AnanthaRajuC/Gitflow-Workflow for **Gitflow Workflow** example with all relevant git commands.

---

### Initialiaztion

- **`git init`** creates a new git repository
- `git clone /path/to/repository` create a working copy of a local repository
- `git clone username@host:/path/to/repository` when using a remote server

---

### Local repository consists of three **trees** maintained by git

- **Working Directory** which holds the actual files
- **Index** is the staging area
- **HEAD** points to the last commit 

---

### Local workflow

- `git add <filename>` add a single changed file to staging area (**Index**)
- `git add *` add all changed files to staging area (**Index**)
- `git commit -m "Commit message"` commit the changed files to **HEAD**

---

### Pushing changes

- `git push origin master`send the changes to your remote repository (Change **master** to whatever **branch** you want to push your changes to)
- `git remote add origin <server>` If you have not cloned an existing repository and want to connect your repository to a remote server

---

### Branching

- **Branches** are used to develop features isolated from each other.
- **master** branch is the **default** branch in a repository.
- other branches are used for development and merged back to the master branch upon completion.

- `git checkout -b feature_x` create a new branch named **feature_x** and switch to it using
- `git checkout master` switch back to master branch
- `git push origin <branch>` push from local to remote **branch**

---

### Deleting a branch

- `git push -d origin <branch name>`

- `git branch -d <branch name>`

---

`git pull` update your local repository to the newest remote commit

---

### Tagging

- `git tag 1.0.0 1b2e1d63ff` create a new tag named <a href="https://semver.org/" target="_blank" >1.0.0</a> where 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag

- `git tag -a 'Version_1_0' -m 'Simple UI' HEAD` - Create Tag - Tag operation allows giving meaningful names to a specific version in the repository.

- `git push origin tag Version_1_0` - push the tag into the remote repository

- `git tag -l` - view all the available tags

---

### Log

- `git log` displays repository commit history
- `git log --author=bob` displays only the commits of a certain author
- `git log --pretty=oneline` displays a very compressed log where each commit is one line
- `git log --graph --oneline --decorate --all` displays an ASCII art tree of all the **branches**, decorated with the names of **tags** and **branches**
- `git log --name-status` displays only which files have changed
- `git log --pretty="%C(Yellow)%h  %C(reset)%ad (%C(Green)%cr%C(reset))%x09 %C(Cyan)%an: %C(reset)%s"`
- `git log --all --decorate --oneline --graph`

---

### Others

- `git log --help` opens a local git-log manual (html) page
- `gitk` opens a built-in git GUI desktop application
- `git config --global commit.template ~/.gitmessage.txt` tell git to use `gitmessage.txt` as the default message that appears in your editor when you run git commit
- `git remote show origin` find the URL of the remote repository

---

### Examples

- `git log --oneline -5 --author cbeams --before "Fri Mar 26 2009"`

---

## commit.template

If you set this to the path of a file on your system, for instance consider a template file at                     `C:\CC_Applications/git-commit-template.txt` 

<script src="https://gist.github.com/AnanthaRajuC/7c064859b3ef1c046c3070801e512001.js?file=git-commit-template.txt"></script>

Git will use this file as the default initial message when you commit. The value in creating a custom commit template is that you can use it to remind yourself (or others) of the proper format and style when creating a commit message.

Here is a template originally written by Tim Pope <https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>

A sample command to set a commit.template is as follows:

`git config --global commit.template C:\CC_Applications/git-commit-template.txt` 

## A successful Git branching model

It is a development model introduced by <a href="https://nvie.com/about/" target="_blank" >Vincent Driessen</a> which helps form an elegant mental model that is easy to comprehend and allows team members to develop a shared understanding of the branching strategy and releasing management processes.

![image](/assets/images/git-model@2x.png)

Read more about the model here, <https://nvie.com/posts/a-successful-git-branching-model/> 

## Resources

- <a href="https://github.com/k88hudson/git-flight-rules" target="_blank" >Flight rules for Git </a>- a guide for programmers using Git about what to do when things go wrong
- <a href="https://chris.beams.io/posts/git-commit/" target="_blank" >How to Write a Git Commit Message</a>
- <a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" target="_blank" >A Note About Git Commit Messages</a>
- <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" >Pro Git</a> by <a href="http://scottchacon.com/about.html" target="_blank" >Scott Chacon</a> and Ben Straub is available to read online for free and download (PDF, EPUB, MOBI).

